import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import uuid from 'uuid/v4';
import { isFunction } from 'lodash-es';
import { attempt } from 'lodash-es';
import { Provider } from '../AxisContext';
import addEventProps, { getNonEventHandlerProps } from '../../utils/events';
import getModifiedProps from '../../utils/getModifiedProps';
import { validAxisTypes } from '../../utils/propTypeValidators';
import { logZAxisErrorMessage } from '../../utils/warnings';

var Axis =
/*#__PURE__*/
function (_Component) {
  _inherits(Axis, _Component);

  function Axis(props) {
    var _this;

    _classCallCheck(this, Axis);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Axis).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getAxisConfig", function () {
      var _this$props = _this.props,
          id = _this$props.id,
          children = _this$props.children,
          rest = _objectWithoutProperties(_this$props, ["id", "children"]);

      var axisId = isFunction(id) ? id() : id;
      var nonEventProps = getNonEventHandlerProps(rest);
      return _objectSpread({
        id: axisId,
        title: {
          text: null
        }
      }, nonEventProps);
    });

    if (process.env.NODE_ENV === 'development') {
      var id = props.id,
          getHighcharts = props.getHighcharts;
      if (id === 'zAxis' && !getHighcharts().ZAxis) logZAxisErrorMessage();
    }

    return _this;
  }

  _createClass(Axis, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props2 = this.props,
          id = _this$props2.id,
          dynamicAxis = _this$props2.dynamicAxis,
          isX = _this$props2.isX,
          getChart = _this$props2.getChart;
      var chart = getChart(); // Create Highcharts Axis

      var opts = this.getAxisConfig();

      if (dynamicAxis) {
        this.axis = chart.addAxis(opts, isX, true);
      } else {
        // ZAxis cannot be added dynamically, Maps only have a single axes - update instead
        var axisId = isFunction(id) ? id() : id;
        this.axis = chart.get(axisId);
        this.axis.update(opts, true);
      }

      var update = this.axis.update.bind(this.axis);
      addEventProps(update, this.props); // Re-render to pass this.axis to Provider

      this.forceUpdate();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var modifiedProps = getModifiedProps(prevProps, this.props);

      if (modifiedProps !== false) {
        this.axis.update(modifiedProps);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.axis.remove) {
        // Axis may have already been removed, i.e. when Chart unmounted
        attempt(this.axis.remove.bind(this.axis));
      }
    }
  }, {
    key: "render",
    value: function render() {
      if (!this.axis) return null;
      return React.createElement(Provider, {
        value: this.axis
      }, this.props.children);
    }
  }]);

  return Axis;
}(Component);

_defineProperty(Axis, "defaultProps", {
  id: uuid,
  children: null,
  dynamicAxis: true
});

export default Axis;