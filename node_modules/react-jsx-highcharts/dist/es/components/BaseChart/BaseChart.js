import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { isEqual } from 'lodash-es';
import { Provider } from '../ChartContext';
import { validChartTypes } from '../../utils/propTypeValidators';

var BaseChart =
/*#__PURE__*/
function (_Component) {
  _inherits(BaseChart, _Component);

  function BaseChart(props) {
    var _this;

    _classCallCheck(this, BaseChart);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BaseChart).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "initHighcharts", function () {
      if (!_this.domNode) {
        return;
      }

      var _this$props = _this.props,
          chartCreationFunc = _this$props.chartCreationFunc,
          callback = _this$props.callback,
          polar = _this$props.polar,
          gauge = _this$props.gauge,
          children = _this$props.children,
          rest = _objectWithoutProperties(_this$props, ["chartCreationFunc", "callback", "polar", "gauge", "children"]);

      var opts = _objectSpread({
        chart: {},
        title: {
          text: null
        },
        subtitle: {
          text: null
        },
        legend: {
          enabled: false
        },
        rangeSelector: {
          enabled: false
        },
        navigator: {
          enabled: false
        },
        scrollbar: {
          enabled: false
        },
        tooltip: {
          enabled: false
        },
        credits: {
          enabled: false
        },
        series: [],
        xAxis: [],
        yAxis: []
      }, rest);

      _this.chart = chartCreationFunc(_this.domNode, opts);
      _this.chart.polar = polar;
      _this.chart.angular = gauge;
      callback(_this.chart);

      _this.setState({
        rendered: true
      });
    });

    _this.state = {
      rendered: false
    };
    return _this;
  }

  _createClass(BaseChart, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // Need to wait for CSS to be applied to parent nodes, or chart is rendered at wrong size
      window.setTimeout(this.initHighcharts, 0);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var plotOptions = this.props.plotOptions;

      if (isEqual(prevProps.plotOptions, plotOptions) === false && this.chart) {
        this.chart.update({
          plotOptions: plotOptions
        }, true);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.chart) {
        // Fixes #14
        window.setTimeout(this.chart.destroy.bind(this.chart), 1);
        this.chart.__destroyed = true;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          chartType = _this$props2.chartType,
          children = _this$props2.children;
      return React.createElement("div", {
        className: "chart ".concat(this.props.className),
        ref: function ref(node) {
          _this2.domNode = node;
        }
      }, this.state.rendered && React.createElement(Provider, {
        value: {
          chart: this.chart,
          chartType: chartType
        }
      }, children));
    }
  }]);

  return BaseChart;
}(Component);

_defineProperty(BaseChart, "defaultProps", {
  children: null,
  className: '',
  callback: function callback() {}
});

export default BaseChart;