import _extends from "@babel/runtime/helpers/esm/extends";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { BaseChart } from 'react-jsx-highcharts';

var HighchartsMapChart =
/*#__PURE__*/
function (_Component) {
  _inherits(HighchartsMapChart, _Component);

  function HighchartsMapChart() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, HighchartsMapChart);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HighchartsMapChart)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getGeoJSON", function (map) {
      if (!map) return;
      return typeof map === 'string' ? _this.props.getHighcharts().maps[map] : map;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "callback", function (chart) {
      var geojson = _this.geojson;

      if (geojson) {
        var format = _this.props.getHighcharts().format;

        var _chart$options$credit = chart.options.credits,
            mapText = _chart$options$credit.mapText,
            mapTextFull = _chart$options$credit.mapTextFull;
        chart.mapCredits = format(mapText, {
          geojson: geojson
        });
        chart.mapCreditsFull = format(mapTextFull, {
          geojson: geojson
        });
      }

      _this.props.callback(chart);
    });

    return _this;
  }

  _createClass(HighchartsMapChart, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          map = _this$props.map,
          chart = _this$props.chart,
          rest = _objectWithoutProperties(_this$props, ["map", "chart"]);

      this.geojson = this.getGeoJSON(map);
      return React.createElement(BaseChart, _extends({
        chart: _objectSpread({}, chart, {
          map: this.geojson
        }),
        mapNavigation: {
          enabled: false
        },
        xAxis: {
          id: 'xAxis'
        },
        yAxis: {
          id: 'yAxis'
        }
      }, rest, {
        callback: this.callback,
        chartCreationFunc: this.props.getHighcharts().mapChart,
        chartType: "mapChart"
      }));
    }
  }]);

  return HighchartsMapChart;
}(Component);

_defineProperty(HighchartsMapChart, "defaultProps", {
  callback: function callback() {}
});

export default HighchartsMapChart;