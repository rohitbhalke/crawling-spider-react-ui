function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';

var MapLoader =
/*#__PURE__*/
function (_Component) {
  _inherits(MapLoader, _Component);

  function MapLoader() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, MapLoader);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MapLoader)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
      data: null,
      error: null
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "updateState", function (state) {
      if (_this.willUnmount) return;

      _this.setState(state);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "fetchJSON", function (url) {
      fetch(url).then(function (res) {
        if (res.ok) return res.json();
        throw res;
      }).then(function (data) {
        _this.updateState({
          data: data
        });
      }).catch(function (error) {
        _this.updateState({
          error: error
        });
      });
    });

    return _this;
  }

  _createClass(MapLoader, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.fetchJSON(this.props.url);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.willUnmount = true;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          renderError = _this$props.renderError,
          renderLoading = _this$props.renderLoading;
      var _this$state = this.state,
          data = _this$state.data,
          error = _this$state.error;

      if (data) {
        return children(data);
      } else if (error) {
        return renderError(error);
      } else {
        return renderLoading();
      }
    }
  }]);

  return MapLoader;
}(Component);

_defineProperty(MapLoader, "propTypes", {
  url: PropTypes.string.isRequired,
  children: PropTypes.func.isRequired,
  renderError: PropTypes.func.isRequired,
  renderLoading: PropTypes.func.isRequired
});

_defineProperty(MapLoader, "defaultProps", {
  renderError: function renderError() {},
  renderLoading: function renderLoading() {
    return 'Loadingâ€¦';
  }
});

export default MapLoader;