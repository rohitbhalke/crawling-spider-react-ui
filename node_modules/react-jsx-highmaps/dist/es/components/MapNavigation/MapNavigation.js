import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { attempt } from 'lodash-es';
import { Hidden, getModifiedProps } from 'react-jsx-highcharts';

var MapNavigation =
/*#__PURE__*/
function (_Component) {
  _inherits(MapNavigation, _Component);

  function MapNavigation(props) {
    var _this;

    _classCallCheck(this, MapNavigation);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapNavigation).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getMapNavigationConfig", function () {
      var _this$props = _this.props,
          getHighcharts = _this$props.getHighcharts,
          children = _this$props.children,
          rest = _objectWithoutProperties(_this$props, ["getHighcharts", "children"]);

      var Highcharts = getHighcharts();
      return _objectSpread({}, Highcharts.defaultOptions && Highcharts.defaultOptions.mapNavigation, rest, {
        enableButtons: false,
        buttons: {
          zoomIn: {},
          zoomOut: {}
        }
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "updateMapNavigation", function (config) {
      var chart = _this.props.getChart();

      chart.update({
        mapNavigation: config
      }, true);
    });

    _this.state = {
      rendered: false
    };
    return _this;
  }

  _createClass(MapNavigation, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props2 = this.props,
          getHighcharts = _this$props2.getHighcharts,
          getChart = _this$props2.getChart; // Workaround inferred from http://jsfiddle.net/x40me94t/2/

      var Highcharts = getHighcharts();
      var chartObj = getChart().object;
      chartObj.options.mapNavigation.enabled = true;
      Highcharts.fireEvent(chartObj, 'beforeRender'); // Highcharts 6.1+

      var opts = this.getMapNavigationConfig();
      this.updateMapNavigation(opts);
      this.setState({
        rendered: true
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var modifiedProps = getModifiedProps(prevProps, this.props);

      if (modifiedProps !== false) {
        this.updateMapNavigation(modifiedProps);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      attempt(this.updateMapNavigation, {
        enabled: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      if (!children || !this.state.rendered) return null;
      return React.createElement(Hidden, null, children);
    }
  }]);

  return MapNavigation;
}(Component);

_defineProperty(MapNavigation, "defaultProps", {
  enabled: true
});

export default MapNavigation;