import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { Component } from 'react';
import PropTypes from 'prop-types';
import { attempt } from 'lodash-es';
import { isEmpty } from 'lodash-es';
import { provideChart } from 'react-jsx-highcharts';

var MapNavigationButton =
/*#__PURE__*/
function (_Component) {
  _inherits(MapNavigationButton, _Component);

  function MapNavigationButton() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, MapNavigationButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MapNavigationButton)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getMapNavigationButtonConfig", function (props) {
      var getHighcharts = props.getHighcharts,
          text = props.children,
          onclick = props.onClick,
          rest = _objectWithoutProperties(props, ["getHighcharts", "children", "onClick"]);

      var Highcharts = getHighcharts();
      return _objectSpread({}, Highcharts.defaultOptions && Highcharts.defaultOptions.mapNavigation.buttonOptions, {
        onclick: onclick
      }, rest, {
        text: text
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "updateMapNavigationButton", function (type, config) {
      var chart = _this.props.getChart();

      chart.update({
        mapNavigation: {
          enableButtons: !isEmpty(config),
          buttons: _defineProperty({}, type, config)
        }
      });
    });

    return _this;
  }

  _createClass(MapNavigationButton, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          type = _this$props.type,
          rest = _objectWithoutProperties(_this$props, ["type"]);

      var opts = this.getMapNavigationButtonConfig(rest);
      this.updateMapNavigationButton(type, opts);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var type = this.props.type;
      attempt(this.removeButton, type, {});
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }]);

  return MapNavigationButton;
}(Component);

export default provideChart(MapNavigationButton); // For testing purposes

export var _MapNavigationButton = MapNavigationButton;